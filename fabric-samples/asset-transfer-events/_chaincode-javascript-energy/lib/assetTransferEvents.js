/*
 * Copyright IBM Corp. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

'use strict';

const { Contract } = require('fabric-contract-api');

const snarkjs = require('snarkjs');

const vkeys = {
	protocol: 'plonk',
	curve: 'bn128',
	nPublic: 2,
	power: 3,
	k1: '2',
	k2: '3',
	Qm: [
		'16308353457673413434931588586642143897888621310145841526304080750847454502613',
		'9923820731645281581167984835306491695948589413806948473036264130103919312541',
		'1'
	],
	Ql: [
		'6627261101164575110446270889250721206882845134587929226991372345978031276032',
		'10936582278901014508024222016363254561618600790903863323970347774228193618373',
		'1'
	],
	Qr: [
		'5995302007628332194899296882634124676730240938690158954324468642737184114425',
		'13627538776861724007175070289379853664930487189602897355850876746457798690807',
		'1'
	],
	Qo: [
		'16308353457673413434931588586642143897888621310145841526304080750847454502613',
		'11964422140193993641078420909950783392747721743490875189652773764541306896042',
		'1'
	],
	Qc: [
		'0',
		'1',
		'0'
	],
	S1: [
		'8581040155608467794950140505775230232496131687856964230195886786521765632213',
		'20017266925075365829097672587969363512705454109968214162324045963170135961941',
		'1'
	],
	S2: [
		'9142121823290443269830187912225959158269458729537864513341431516858768486565',
		'1143572923977487506482642912914161008534304574653740427213979962416298564836',
		'1'
	],
	S3: [
		'8260180890399030967426931818984140585083808387534859462048372085933405200479',
		'21856673361214081933322732718529356175328729769826181843755806287370820865296',
		'1'
	],
	X_2: [
		[
			'20674538444583252300123772161848714129920739942594419301040823624809398734894',
			'12077628464038075116274696557066370993449736520417740136177184848263310886605'
		],
		[
			'13327602965770237525855921778174285145037397855687714796358671723986273543768',
			'12153584146340265159517244233507447634156594850637259833450799814770371602508'
		],
		[
			'1',
			'0'
		]
	],
	w: '19540430494807482326159819597004422086093766032135589407132600596362845576832'
};

const proof = {
	A: [
		'14108397078911550466077880737145433606353831995728429673183478321279230686091',
		'9222742740071917839955954918085944924600626519800784615414032355687613833226',
		'1'
	],
	B: [
		'5782364051043601413065469717709597903900294665273174145564687976238593710918',
		'9409525848995530057888399056016177329762187142155029764649313595613706923013',
		'1'
	],
	C: [
		'17508156007138962761699939840780597140795504778637447377257266464594363853567',
		'15674353385131912196339516530715623978896379235017108493230366591888419089628',
		'1'
	],
	Z: [
		'5097831635073474105599606372419251581134560138946821078530796869955300566719',
		'10066340810089085542587574684390439748552412100374829651634010147888732403318',
		'1'
	],
	T1: [
		'2176130858654559712121929523327766311726553744121604983634218654018690773790',
		'3434276717335729552024272030809409962509219557501992967958956375008991180994',
		'1'
	],
	T2: [
		'6650561616928798102356195137964098278226260963406088562520264176807266622797',
		'9436537746315689311434615455727864040601986625848214024717464716246278482869',
		'1'
	],
	T3: [
		'954217489813224871278350747652694056298017993284791321406131101840698432749',
		'21818378827292221461161168357038542764788917361468589968712900760544204152531',
		'1'
	],
	Wxi: [
		'12354812119120215030831819213154646336413784499473965456323406925445752044200',
		'1794157915308047536686195257906554973974314166287103510899367558397468141830',
		'1'
	],
	Wxiw: [
		'6811257517577103283775911337952026823005248675910837348684191198727072317082',
		'21457483412276866045177378420349878822595052109491097478663629937312869292114',
		'1'
	],
	eval_a: '21299918910390636812637662366240583505342598735269210395225747874794341044505',
	eval_b: '8251224511411582409364464828114436937711765269934284554631221381130782298810',
	eval_c: '3172065770791538993240918228190501034664175413243398862295025773928631082708',
	eval_s1: '1725885148445769028024873772927642663009974279291692748106233177258964134367',
	eval_s2: '6212356582742976925288713421592039268353852639101309950170308632060390378308',
	eval_zw: '15955098486021053728231913856919957689363142270885587344244073941400061314105',
	protocol: 'plonk',
	curve: 'bn128'
};

const proofG16 ={
	'pi_a': [
	 '17494301228801157995790825788770710086148145167573544781406495001059612943579',
	 '14998196012097711580271855546563201341807802696401127517848888060430017297724',
	 '1'
	],
	'pi_b': [
	 [
	  '16399451924582219814915365423189974981127050819255688741735030145820473538728',
	  '21264363570596107720993881283133823328448378017106450185005000256639501560300'
	 ],
	 [
	  '7199458270986963493476873255733051153897309085829614882823421609105189594514',
	  '18711265154348830077971425428232226661342125677537964390163430762893040584082'
	 ],
	 [
	  '1',
	  '0'
	 ]
	],
	'pi_c': [
	 '8104054845797424755878684294399969201252022519792538238120346001376747697243',
	 '15085445623496729740025522172039887381113332656224260593708656095472530282243',
	 '1'
	],
	'protocol': 'groth16',
	'curve': 'bn128'
   };

const vkeysG16 = {
	'protocol': 'groth16',
	'curve': 'bn128',
	'nPublic': 2,
	'vk_alpha_1': [
	 '16886144347130789638890366024163716973740301009711356441488005960769148801747',
	 '9139787647312260170034190667074222049616595706879072078311251605928484049627',
	 '1'
	],
	'vk_beta_2': [
	 [
	  '21445512674224778563625077884159709880679207118047475449992073619271891870565',
	  '10633780575479819305485642739951345727062371521628367030492041006925710353435'
	 ],
	 [
	  '12194128399553384891079563787262729074136632665099458140711531848858169144137',
	  '11193768651051636659384233764284538618870778947696362851510032309912552722677'
	 ],
	 [
	  '1',
	  '0'
	 ]
	],
	'vk_gamma_2': [
	 [
	  '10857046999023057135944570762232829481370756359578518086990519993285655852781',
	  '11559732032986387107991004021392285783925812861821192530917403151452391805634'
	 ],
	 [
	  '8495653923123431417604973247489272438418190587263600148770280649306958101930',
	  '4082367875863433681332203403145435568316851327593401208105741076214120093531'
	 ],
	 [
	  '1',
	  '0'
	 ]
	],
	'vk_delta_2': [
	 [
	  '10857046999023057135944570762232829481370756359578518086990519993285655852781',
	  '11559732032986387107991004021392285783925812861821192530917403151452391805634'
	 ],
	 [
	  '8495653923123431417604973247489272438418190587263600148770280649306958101930',
	  '4082367875863433681332203403145435568316851327593401208105741076214120093531'
	 ],
	 [
	  '1',
	  '0'
	 ]
	],
	'vk_alphabeta_12': [
	 [
	  [
	   '16138696978742284005577704780999992633954551043994464483572925373066022293207',
	   '5413461314551386560696360635484261439465349373569271044279448419153061249761'
	  ],
	  [
	   '19711704081080054446073810619064547580658037864365335373271372221727631739926',
	   '14357108514726472999308611312927975135996197885288585168857223687195891413425'
	  ],
	  [
	   '17424779173488646395765890085143506410788503877310075134948032847952269073471',
	   '17264923566688193577313231822818982414322989939374035378923305234327392246820'
	  ]
	 ],
	 [
	  [
	   '16074043030452591720740830362104924645643328667862296828296943154347589788014',
	   '4109832413140858819237230254518482522869028570275510257388690647907187727234'
	  ],
	  [
	   '8476747327475382549391178978806470221390261968200253275658352847164082733262',
	   '12074900681243120343155262726064716126998124555080319085683413941298143374899'
	  ],
	  [
	   '14458246159468386205298477126784031314205270888272781181398692237613146159027',
	   '14368905634660608854902869294659680836653745616888077583075227386268207384827'
	  ]
	 ]
	],
	'IC': [
	 [
	  '15217270606792618716839416231838891027908932493807730666584541595355547759546',
	  '2757050181920128430708304184684728905952855630628107800058653950237194188828',
	  '1'
	 ],
	 [
	  '4940761223110997680788289677765605492788583010051192669557066168129206976561',
	  '11053582735392257001453036288843527339328739885616446825689110348364577364130',
	  '1'
	 ],
	 [
	  '6571905499179797562923749621421309692877880674595888826509740422425674232245',
	  '17709996515379672935239269912365001438404661716486745056603792066445606473775',
	  '1'
	 ]
	]
   };

const arrayArg = JSON.stringify(['9261', '9261']);

async function savePrivateData(ctx, assetKey) {
	const clientOrg = ctx.clientIdentity.getMSPID();
	const peerOrg = ctx.stub.getMspID();
	const collection = '_implicit_org_' + peerOrg;

	if (clientOrg === peerOrg) {
		const transientMap = ctx.stub.getTransient();
		if (transientMap) {
			const properties = transientMap.get('asset_properties');
			if (properties) {
				await ctx.stub.putPrivateData(collection, assetKey, properties);
			}
		}
	}
}

async function removePrivateData(ctx, assetKey) {
	const clientOrg = ctx.clientIdentity.getMSPID();
	const peerOrg = ctx.stub.getMspID();
	const collection = '_implicit_org_' + peerOrg;

	if (clientOrg === peerOrg) {
		const propertiesBuffer = await ctx.stub.getPrivateData(collection, assetKey);
		if (propertiesBuffer && propertiesBuffer.length > 0) {
			await ctx.stub.deletePrivateData(collection, assetKey);
		}
	}
}

async function addPrivateData(ctx, assetKey, asset) {
	const clientOrg = ctx.clientIdentity.getMSPID();
	const peerOrg = ctx.stub.getMspID();
	const collection = '_implicit_org_' + peerOrg;

	if (clientOrg === peerOrg) {
		const propertiesBuffer = await ctx.stub.getPrivateData(collection, assetKey);
		if (propertiesBuffer && propertiesBuffer.length > 0) {
			const properties = JSON.parse(propertiesBuffer.toString());
			asset.asset_properties = properties;
		}
	}
}

async function readState(ctx, id) {
	const assetBuffer = await ctx.stub.getState(id); // get the asset from chaincode state
	if (!assetBuffer || assetBuffer.length === 0) {
		throw new Error(`The asset ${id} does not exist`);
	}
	const assetString = assetBuffer.toString();
	const asset = JSON.parse(assetString);

	return asset;
}

async function VerifyPlonk(ctx, inputs) {
	const inputsJSON = JSON.parse(inputs);
	const result = await snarkjs.plonk.verify(vkeys, inputsJSON, proof);
	if(!result){
		throw new Error('UNAUTHORIZED');
	}
	return result;
}

async function VerifyGroth16(ctx, inputs) {
	const inputsJSON = JSON.parse(inputs);
	const result = await snarkjs.groth16.verify(vkeysG16, inputsJSON, proofG16);
	if(!result){
		throw new Error('UNAUTHORIZED');
	}
	return result;
}

async function VerifyFflonk(ctx, inputs) {
	const inputsJSON = JSON.parse(inputs);
	const result = await snarkjs.fflonk.verify(vkeysG16, inputsJSON, proofG16);
	if(!result){
		throw new Error('UNAUTHORIZED');
	}
	return result;
}

class AssetTransferEvents extends Contract {

	// CreateAsset issues a new asset to the world state with given details.
	async CreateAsset(ctx, id) {
		const asset = {
			ID: id,
			EnergyUsage: '0',
		};
		await savePrivateData(ctx, id);
		const assetBuffer = Buffer.from(JSON.stringify(asset));

		ctx.stub.setEvent('CreateAsset', assetBuffer);
		return ctx.stub.putState(id, assetBuffer);
	}

	async GetEnergyUsage(ctx, id, inputs) {
		// const verifyPlonk = await VerifyPlonk(ctx,inputs);
		const verify = await VerifyPlonk(ctx,inputs);

		if(!verify){
			throw new Error('UNAUTHORIZED');
		}
		const startTime = Date.now();
		const energyDataBuffer = await ctx.stub.invokeChaincode('apartment', ['QueryEnergyUsage', id, arrayArg], 'mychannel');
		const endTime = Date.now();
		if (energyDataBuffer.status !== 200) {
			throw new Error(`Failed to query energy price: ${energyDataBuffer.message}`);
		}
		const assetAux = JSON.parse(energyDataBuffer.payload.toString());
		assetAux.StartTime = startTime;
		assetAux.EndTime = endTime;
		assetAux.Latency = (parseFloat(endTime) - parseFloat(startTime));

		return JSON.stringify(assetAux);
	}

	// ReadAsset returns the asset stored in the world state with given id.
	async ReadAsset(ctx, id) {
		const asset = await readState(ctx, id);
		await addPrivateData(ctx, asset.ID, asset);

		return JSON.stringify(asset);
	}

	// UpdateAsset updates an existing asset in the world state with provided parameters.
	async UpdateAsset(ctx, id, energyUsage, startTime, endTime, latency) {
		const asset = await readState(ctx, id);
		asset.EnergyUsage = energyUsage;
		asset.StartTime = startTime;
		asset.EndTime = endTime;
		asset.Latency = latency;
		const assetBuffer = Buffer.from(JSON.stringify(asset));
		await savePrivateData(ctx, id);

		ctx.stub.setEvent('UpdateAsset', assetBuffer);
		return ctx.stub.putState(id, assetBuffer);
	}

	// OracleUpdateAsset updates an existing asset in the world state with provided parameters.
	async OracleUpdateAsset(ctx, id, phrase, typeId) {
		const asset = await readState(ctx, id);
		if(parseInt(typeId) == 0){
			asset.Price = '23';
			asset.Phrase = phrase;
			asset.TypeID = typeId;
			asset.Invoice = JSON.stringify(parseInt(asset.EnergyUsage) * 23);
		}
		if(parseInt(typeId) == 1){
			asset.Price = '19';
			asset.Phrase = phrase;
			asset.TypeID = typeId;
			asset.Invoice = JSON.stringify(parseInt(asset.EnergyUsage) * 19);
		}
		const assetBuffer = Buffer.from(JSON.stringify(asset));
		await savePrivateData(ctx, id);

		ctx.stub.setEvent('OracleUpdateAsset', assetBuffer);
		return ctx.stub.putState(id, assetBuffer);
	}

	// DeleteAsset deletes an given asset from the world state.
	async DeleteAsset(ctx, id) {
		const asset = await readState(ctx, id);
		const assetBuffer = Buffer.from(JSON.stringify(asset));
		// await removePrivateData(ctx, id);

		ctx.stub.setEvent('DeleteAsset', assetBuffer);
		// return ctx.stub.deleteState(id);
	}
}

module.exports = AssetTransferEvents;
